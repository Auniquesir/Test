name: Fork Rules

on:
  workflow_dispatch:

jobs:
  ForkRules:
    runs-on: ubuntu-24.04
    env:
      TZ: 'Asia/Shanghai'

    steps:
    - name: Checkout target repository
      uses: actions/checkout@v4.2.2

    # 拉取 .list 文件下载链接并保存到 txt 文件
    - name: Fetch .list file links recursively with pagination and better error handling
      run: |
        # GitHub API URL for the main directory
        GITHUB_API_URL="https://api.github.com/repos/blackmatrix7/ios_rule_script/contents/rule/QuantumultX"
        
        # 输出文件路径
        OUTPUT_FILE="quantumultx_list_links.txt"

        # 创建空的输出文件
        echo "" > $OUTPUT_FILE

        # 函数：递归获取文件和文件夹，处理分页
        fetch_files() {
          local url=$1
          # 获取目录或文件列表
          while : ; do
            # 请求当前 URL 并获取分页数据，同时输出调试信息
            response=$(curl -s -w "%{http_code}" -H "Accept: application/vnd.github.v3+json" "$url")
            http_code=$(echo "$response" | tail -n1)  # 获取 HTTP 状态码
            response_body=$(echo "$response" | head -n -1)  # 获取除状态码外的响应内容

            # 输出调试信息，检查 API 返回内容
            echo "Processing URL: $url"
            echo "HTTP Status Code: $http_code"
            echo "API Response Body: $response_body"  # 打印返回的响应内容

            if [[ "$http_code" != "200" ]]; then
              echo "Error: Received HTTP $http_code from GitHub API"
              exit 1
            fi

            # 确保返回的数据是有效的 JSON 格式
            if ! echo "$response_body" | jq empty; then
              echo "Invalid JSON response from GitHub API"
              exit 1
            fi

            # 检查是否存在需要提取的 .list 文件下载链接
            echo "$response_body" | jq -r '.[] | select(.type == "file" and .name | endswith(".list")) | .download_url' | while read -r file_url; do
              if [[ -n "$file_url" ]]; then
                echo "Found .list file: $file_url"
                echo $file_url >> $OUTPUT_FILE
              fi
            done

            # 检查是否有分页（Link header）
            next_page_url=$(echo "$response_body" | grep -i 'rel="next"' | sed 's/.*<\(.*\)>; rel="next"/\1/')
            if [ -z "$next_page_url" ]; then
              break
            else
              # 如果有分页，继续请求下一页
              echo "Fetching next page: $next_page_url"
              url=$next_page_url
            fi
          done
        }

        # 调用递归函数从主目录开始获取文件
        fetch_files $GITHUB_API_URL

        # 打印提取的下载链接
        echo "Extracted download links:"
        cat $OUTPUT_FILE

    # 添加并提交更改
    - name: Add and Commit
      run: |
        if [[ -n $(git status -s) ]]; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "Auto Update $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M')"
          git pull --rebase origin X
          git push origin X
        else
          echo "No changes to commit."
        fi

    # 清理工作流
    - name: Cleanup Workflow
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2
