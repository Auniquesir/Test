name: Fork Rules

on:
  workflow_dispatch:

jobs:
  ExtractLinks:
    runs-on: ubuntu-24.04
    env:
      TZ: 'Asia/Shanghai'

    steps:
    - name: Checkout target repository
      uses: actions/checkout@v4.2.2

    - name: Clone the repository
      run: |
        echo "Cloning repository..."
        git clone https://github.com/blackmatrix7/ios_rule_script.git
        echo "Repository cloned."

    - name: List repository contents
      run: |
        echo "Listing contents of the repository to ensure it's cloned correctly..."
        ls -R ios_rule_script/rule/QuantumultX

    - name: Create folder for extracted links
      run: |
        mkdir -p QuantumultX_files
        echo "Folder for extracted links created."

    - name: Find README.md files and extract links
      run: |
        echo "Searching for README.md files..."
        find ./ios_rule_script/rule/QuantumultX -type f -name "README.md" -exec echo "Found README: {}" \; | tee found_readmes.txt
        echo "Found README.md files listed in found_readmes.txt."
        
        # 从 README.md 文件中提取符合条件的链接
        find ./ios_rule_script/rule/QuantumultX -type f -name "README.md" | while read file; do
          echo "Processing $file"
          
          # 检查文件是否包含目标链接
          grep -o 'https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/QuantumultX/[^"]*' "$file" | tee -a QuantumultX_files/links_from_readme.txt
        done

    - name: Check extracted links
      run: |
        echo "Extracted links:"
        cat QuantumultX_files/links_from_readme.txt

    - name: Upload extracted links as artifact
      uses: actions/upload-artifact@v3
      with:
        name: readme-links
        path: QuantumultX_files/links_from_readme.txt

    - name: Add and Commit
      run: |
        if [[ -n $(git status -s) ]]; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "Auto Update $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M')"
          git pull --rebase origin X
          git push origin X
        else
          echo "No changes to commit."
        fi

    # 清理工作流
    - name: Cleanup Workflow
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2


on:
  workflow_dispatch:

jobs:
  ForkRules:
    runs-on: ubuntu-24.04
    env:
      TZ: 'Asia/Shanghai'

    steps:
    - name: Checkout target repository
      uses: actions/checkout@v4.2.2

    # 拉取 .list 文件下载链接并保存到 txt 文件
    - name: Fetch .list file links recursively with pagination
      run: |
        # GitHub API URL for the main directory
        GITHUB_API_URL="https://api.github.com/repos/blackmatrix7/ios_rule_script/contents/rule/QuantumultX"
        
        # 输出文件路径
        OUTPUT_FILE="quantumultx_list_links.txt"

        # 创建空的输出文件
        echo "" > $OUTPUT_FILE

        # 函数：递归获取文件和文件夹，处理分页
        fetch_files() {
          local url=$1
          # 获取目录或文件列表
          while : ; do
            # 请求当前 URL 并获取分页数据
            response=$(curl -s -H "Accept: application/vnd.github.v3+json" "$url")
            
            # 从响应中提取下载链接（文件）或递归目录
            echo "$response" | jq -r '.[] | if .type == "file" then .download_url else if .type == "dir" then .url else empty end end' | while read -r file_url; do
              if [[ "$file_url" == *".list" ]]; then
                # 如果是 .list 文件，则提取下载链接并保存
                echo $file_url >> $OUTPUT_FILE
              else
                # 如果是目录，递归调用 fetch_files
                fetch_files $file_url
              fi
            done

            # 检查是否有分页（Link header）
            next_page_url=$(echo "$response" | grep -i 'rel="next"' | sed 's/.*<\(.*\)>; rel="next"/\1/')
            if [ -z "$next_page_url" ]; then
              break
            else
              # 如果有分页，继续请求下一页
              url=$next_page_url
            fi
          done
        }

        # 调用递归函数从主目录开始获取文件
        fetch_files $GITHUB_API_URL

        # 打印提取的下载链接
        echo "Extracted download links:"
        cat $OUTPUT_FILE

    # 添加并提交更改
    - name: Add and Commit
      run: |
        if [[ -n $(git status -s) ]]; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git commit -m "Auto Update $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M')"
          git pull --rebase origin X
          git push origin X
        else
          echo "No changes to commit."
        fi

    # 清理工作流
    - name: Cleanup Workflow
      uses: Mattraks/delete-workflow-runs@main
      with:
        retain_days: 0
        keep_minimum_runs: 2
